"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const core_js_1 = require("../../core.js");
const component_js_1 = require("../../component.js");
/**
 * This Component work on the client and the server.
 * (Make your you prefetch the static getData() and pass it as "data" props in SSR)
 */
// simply mocks a server fetch and returns an array of comments
const fetchMock = () => new Promise(resolve => setTimeout(() => resolve(['comment_one', 'comment_two']), 500));
const Comments = ({ comments }) => {
    console.log(comments);
    return ((0, core_js_1.h)("ul", null, comments.map(d => ((0, core_js_1.h)("li", null, d)))));
};
// const Bla = () => {
//   console.log('BLA')
//   return <div>asdf</div>
// }
// the app component
class App extends component_js_1.Component {
    // this static method can be calles before the componend is rendered in SSR mode
    static getData() {
        return __awaiter(this, void 0, void 0, function* () {
            // get some data from your server
            return yield fetchMock();
        });
    }
    didMount() {
        return __awaiter(this, void 0, void 0, function* () {
            // will re-render the component and pass the result of getData()
            const data = yield App.getData();
            this.update(data);
        });
    }
    render(data) {
        // this.props.data will be defined if in SSR mode
        data = data || this.props.data;
        // console.log(Nano.h(Bla, null))
        if (data)
            return (0, core_js_1.h)(Comments, { comments: data });
        // <Comments comments={data} />
        // this will be shown while loading on the client side
        else
            return (0, core_js_1.h)("div", null, "loading...");
    }
}
exports.App = App;
//# sourceMappingURL=isomorphic.js.map