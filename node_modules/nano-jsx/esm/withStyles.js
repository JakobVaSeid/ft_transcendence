var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { h } from './core.js';
import { Component } from './component.js';
import { Fragment } from './fragment.js';
import { Helmet } from './components/helmet.js';
export const withStyles = (...styles) => (WrappedComponent) => {
    return class extends Component {
        render() {
            const _a = this.props, { children } = _a, rest = __rest(_a, ["children"]);
            const helmets = [];
            styles.forEach(style => {
                var _a;
                if (typeof style === 'string') {
                    helmets.push(h(Helmet, null, h('style', null, style)));
                }
                else if (typeof style === 'function') {
                    const _style = style();
                    if (typeof _style === 'string') {
                        helmets.push(h(Helmet, null, h('style', null, _style)));
                    }
                }
                else if (typeof style === 'object') {
                    const _style = (_a = style.toString) === null || _a === void 0 ? void 0 : _a.call(style);
                    if (typeof _style === 'string') {
                        helmets.push(h(Helmet, null, h('style', null, _style)));
                    }
                }
            });
            const component = children && children.length > 0
                ? h(WrappedComponent, Object.assign({}, rest), children)
                : h(WrappedComponent, Object.assign({}, this.props));
            return h(Fragment, null, ...helmets, component);
        }
    };
};
//# sourceMappingURL=withStyles.js.map